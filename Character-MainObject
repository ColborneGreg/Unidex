Imports System.Text.Encoding
Imports unidex.Interfaces
Imports System.IO
Imports System.Runtime.Serialization
Imports unidex.Constants



<System.Runtime.Serialization.KnownType(GetType(System.Byte()))>
    <System.Runtime.Serialization.KnownType(GetType(System.DateTime()))>
    <System.Runtime.Serialization.KnownType(GetType(System.Int16()))>
    <System.Runtime.Serialization.KnownType(GetType(System.Int32()))>
    <System.Runtime.Serialization.KnownType(GetType(System.Int64()))>
    <System.Runtime.Serialization.KnownType(GetType(System.Decimal()))>
    <System.Runtime.Serialization.KnownType(GetType(System.String()))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.TimeStamp))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Constants.PacketData))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Constants.WebApi))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Constants.EventLogEntry))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Passwords))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Extension))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Identification))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Arrays.Bytes))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Arrays.Dates))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Arrays.Numbers))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Arrays.Integers))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Arrays.Strings))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Arrays.Characters))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Arrays.Weight))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Directory.User))>
    <System.Runtime.Serialization.KnownType(GetType(Unidex.Directory.Machine))>
<System.Runtime.Serialization.KnownType(GetType(Unidex.Directory.AuthorityInfo))>
<System.Runtime.Serialization.KnownType(GetType(Unidex.Types.Random))>
<System.Runtime.Serialization.KnownType(GetType(Unidex.Types.Margin))>
<System.Runtime.Serialization.DataContract(isreference:=True)>
Public Class Extension
    Inherits Extension(Of Extension)
    Implements IExtension, IEncodable

    <System.Runtime.Serialization.IgnoreDataMember>
    Public Shared Property User As Interfaces.IUser

End Class


<System.Runtime.Serialization.DataContract(isreference:=True)>
Public Class Extension(Of InheritedType As IEncodable)
    Inherits Identification(Of InheritedType)
    Implements IExtension, IEncodable



    Public Event CreationProcedureNotSet() Implements IExtension.CreationProcedureNotSet

    Public Sub New()
        MyBase.New()
    End Sub

    <System.Runtime.Serialization.DataMember> _
    Private mAll() As IExtension,
            mFieldName As String,
            mFieldType As Object,
            mFileName As String,
            mCanSort As Boolean,
            mFullName As String,
            mGrandParent As IExtension,
            mLastSaveDate As DateTime,
            misaChild As Boolean,
            mLetter As Char,
            mParent As IExtension,
            mPreviousCharacter As IExtension,
            mAllWords As String(), _
            mvalues As IExtension()

    <System.Runtime.Serialization.IgnoreDataMember>
    Private mNeedsToSave As Boolean

    <System.Runtime.Serialization.IgnoreDataMember>
    Private mNuotaValue As Object

    <System.Runtime.Serialization.IgnoreDataMember>
    Private mCreateCharacter As IExtension.CreateCharacterDelegate

    <System.Runtime.Serialization.IgnoreDataMember>
    Public CreationIsSet As Boolean

    Public Sub SetCreationCharacter()
        If Not CreationIsSet Then
            Me.CreateCharacter = New Interfaces.IExtension.CreateCharacterDelegate(AddressOf Me.Create)
            CreationIsSet = True
        End If
    End Sub


    Public Property All As IExtension() Implements IExtension.All
        Get
            Return mAll
        End Get
        Set(value As IExtension())
            mAll = value
        End Set
    End Property

    Public Property Words As String() Implements IExtension.Words
        Get
            Return mAllWords
        End Get
        Set(value As String())
            mAllWords = value
        End Set
    End Property
    Public Function Create(Letter As Char, Name As String) As IExtension Implements IExtension.Create
        Dim Index As Byte = ControlChars.ConvertCharacterToLong(Letter)
        Try
            If All(Index) IsNot Nothing Then Return All(Index)
        Catch
        End Try
        Dim Item As IExtension = New Extension With {.Letter = Letter, .Name = Name, .PreviousCharacter = Me}
        Arrays.Array(Of IExtension).Allocate(All, Item, Index)
        Return Item
    End Function
    Public Property CreateCharacter As IExtension.CreateCharacterDelegate Implements IExtension.CreateCharacter
        Get
            If mCreateCharacter Is Nothing Then RaiseEvent CreationProcedureNotSet()
            Return mCreateCharacter
        End Get
        Set(value As IExtension.CreateCharacterDelegate)
            mCreateCharacter = value
        End Set
    End Property

    Public Sub Delete() Implements IExtension.Delete
        CType(Me.PreviousCharacter, Extension).All(ControlChars.ConvertCharacterToLong(Letter)) = Nothing
    End Sub
    Public Property CanSort As Boolean Implements IExtension.CanSort
        Get
            Return mCanSort
        End Get
        Set(value As Boolean)
            mCanSort = value
        End Set
    End Property
    Public Property FieldName As String Implements IExtension.FieldName
        Get
            Return mFieldName
        End Get
        Set(value As String)
            mFieldName = value
        End Set
    End Property
    Public Property FieldType As Object Implements IExtension.FieldType
        Get
            Return mFieldType
        End Get
        Set(value As Object)
            mFieldType = value
        End Set
    End Property
    Public Property GrandParent As IExtension Implements IExtension.GrandParent
        Get
            Return mGrandParent
        End Get
        Set(value As IExtension)
            mGrandParent = value
        End Set
    End Property
    Public Property IsaChild As Boolean Implements IExtension.IsaChild
        Get
            Return misaChild
        End Get
        Set(value As Boolean)
            misaChild = value
        End Set
    End Property
    Public Property Letter As Char Implements IExtension.Letter
        Get
            Return mLetter
        End Get
        Set(value As Char)
            mLetter = value
        End Set
    End Property
    Public Property NeedsToSave As Boolean Implements IExtension.NeedsToSave
        Get
            Return mNeedsToSave
        End Get
        Set(value As Boolean)
            mNeedsToSave = value
        End Set
    End Property
    Public Property NextCharacter(Letter As Char) As IExtension Implements IExtension.NextCharacter
        Get
            Me.All(ControlChars.ConvertCharacterToLong(Letter)).Check()
            Return Me.All(ControlChars.ConvertCharacterToLong(Letter))
        End Get
        Set(value As IExtension)
            Me.All(ControlChars.ConvertCharacterToLong(Letter)) = value
        End Set
    End Property
    Public Property Parent As IExtension Implements IExtension.Parent
        Get
            Return mParent
        End Get
        Set(value As IExtension)
            mParent = value
        End Set
    End Property
    Public Property PreviousCharacter As IExtension Implements IExtension.PreviousCharacter
        Get
            Return mPreviousCharacter
        End Get
        Set(value As IExtension)
            mPreviousCharacter = value
        End Set
    End Property

    Public Property NuotaValue As Object Implements IExtension.NuotaValue
        Get
            Return mNuotaValue
        End Get
        Set(value As Object)
            mNuotaValue = value
        End Set
    End Property
    Public Property ʴnv(Name As String, Optional CreationProcedure As IExtension.ValueCreationDelegate = Nothing, Optional PolymorphProcedure As IExtension.ValueCreationDelegate = Nothing) As Object Implements IExtension.ʴnv
        Get
            Try
                Try
                    ReferenceOverhead.Attempt(Name, Me).Check()
                    Try
                        If Me.ʴ(Name).NuotaValue Is Nothing Then Me.ʴ(Name).NuotaValue = PolymorphProcedure(Name)
                    Catch ex As Exception
                        Me.ʴ(Name).NuotaValue = PolymorphProcedure(Name)
                    End Try
                Catch
                    Me.ʴ(Name).NuotaValue = CreationProcedure(Name)
                End Try
            Catch
            End Try
            Return Me.ʴ(Name).NuotaValue
        End Get
        Set(value As Object)
            Me.ʴ(Name).NuotaValue = value
        End Set
    End Property

    Public ReadOnly Property ʴ(Name As String) As IExtension Implements IExtension.ʴ
        Get
            If Name Is Nothing Then Throw New Exception("Name can not be nothing")

            SetCreationCharacter()
            Try
                Return ReferenceOverhead.InlineIndex(ReferenceOverhead.Attempt(Name, Me), Me)
            Catch
                Return ReferenceOverhead.InlineIndex(ReferenceOverhead.InnerSpace(Name, Me), Me)
            End Try
        End Get
    End Property

    Public Property ʴb(Name As String, User As Interfaces.IUser) As Boolean Implements IExtension.ʴb
        Get
            Try
                Return ReferenceOverhead.Attempt(Name, Me).Value(User)
            Catch
                Return False
            End Try
        End Get
        Set(value As Boolean)
            Me.ʴ(Name).FieldName = "Boolean"
            Me.ʴ(Name).CanSort = False
            Me.ʴ(Name).Value(DateTime.Now, User) = value
        End Set
    End Property

    Public Property ʴd(Name As String, User As Interfaces.IUser, Optional CanSort As Boolean = False) As Decimal Implements IExtension.ʴd
        Get
            Try
                Return ReferenceOverhead.Attempt(Name, Me).Value(User)
            Catch
                Return 0.0
            End Try
        End Get
        Set(value As Decimal)
            Me.ʴ(Name).FieldName = "Decimal"
            Me.ʴ(Name).CanSort = CanSort
            Me.ʴ(Name).Value(DateTime.Now, User) = value
            If CanSort Then ReferenceOverhead.HandleListNames(value, Me.ʴ(Name))
        End Set
    End Property

    Public Property ʴh(Name As String, User As Interfaces.IUser, Optional CanSort As Boolean = False) As Byte Implements IExtension.ʴh
        Get
            Try
                Return ReferenceOverhead.Attempt(Name, Me).Value(User)
            Catch
                Return 0
            End Try
        End Get
        Set(value As Byte)
            Me.ʴ(Name).FieldName = "Byte"
            Me.ʴ(Name).CanSort = CanSort
            Me.ʴ(Name).Value(DateTime.Now, User) = value
            If CanSort Then ReferenceOverhead.HandleListNames(value, Me.ʴ(Name))
        End Set
    End Property

    Public Property ʴm(Name As String, User As Interfaces.IUser) As MemoryStream Implements IExtension.ʴm
        Get
            Try
                Return Unidex.Constants.JSON.StringToStream(CStr(ReferenceOverhead.Attempt(Name, Me).Value(User)))
            Catch
                Return Nothing
            End Try
        End Get
        Set(value As MemoryStream)
            Me.ʴ(Name).FieldName = "MemoryStream"
            Me.ʴ(Name).CanSort = False
            Me.ʴ(Name).Value(DateTime.Now, User) = Unidex.Constants.JSON.StreamToString(value)
        End Set
    End Property

    Public Property ʴn(Name As String, User As Interfaces.IUser, Optional CanSort As Boolean = False) As Long Implements IExtension.ʴn
        Get
            Try
                Return ReferenceOverhead.Attempt(Name, Me).Value(User)
            Catch
                Return 0
            End Try
        End Get
        Set(value As Long)
            Me.ʴ(Name).FieldName = "Int64"
            Me.ʴ(Name).CanSort = CanSort
            Me.ʴ(Name).Value(DateTime.Now, User) = value
            If CanSort Then ReferenceOverhead.HandleListNames(value, Me.ʴ(Name))
        End Set
    End Property

    Public Property ʴs(Name As String, User As IUser, Optional CanSort As Boolean = False) As String Implements IExtension.ʴs
        Get
            Try
                Return ReferenceOverhead.Attempt(Name, Me).Value(User)
            Catch
                Return ""
            End Try
        End Get
        Set(value As String)
            Me.ʴ(Name).FieldName = "String"
            Me.ʴ(Name).Value(DateTime.Now, User) = value
            Me.ʴ(Name).CanSort = CanSort
            If CanSort Then ReferenceOverhead.HandleListNames(value, Me.ʴ(Name))
        End Set
    End Property

    Public Property ʴt(Name As String, User As IUser, Optional CanSort As Boolean = False) As Date Implements IExtension.ʴt
        Get
            Try
                Return ReferenceOverhead.Attempt(Name, Me).Value(User)
            Catch
                Return Nothing
            End Try
        End Get
        Set(value As Date)
            Me.ʴ(Name).FieldName = "DateTime"
            Me.ʴ(Name).Value(DateTime.Now, User) = value
            Me.ʴ(Name).CanSort = CanSort
            If CanSort Then ReferenceOverhead.HandleListNames(value, Me.ʴ(Name))
        End Set
    End Property
    Public Property ʴts(Name As String, User As IUser, Optional CanSort As Boolean = False) As TimeSpan Implements IExtension.ʴts
        Get
            Try
                Return ReferenceOverhead.Attempt(Name, Me).Value(User)
            Catch
                Return Nothing
            End Try
        End Get
        Set(value As TimeSpan)
            Me.ʴ(Name).FieldName = "TimeSpan"
            Me.ʴ(Name).Value(DateTime.Now, User) = value
            Me.ʴ(Name).CanSort = CanSort
            If CanSort Then ReferenceOverhead.HandleListNames(value, Me.ʴ(Name))
        End Set
    End Property
    Public Property ʴv(Name As String, User As Interfaces.IUser) As Object Implements IExtension.ʴv
        Get
            Try
                Return ReferenceOverhead.Attempt(Name, Me).Value(User)
            Catch
                Return Nothing
            End Try
        End Get
        Set(value As Object)
            Me.ʴ(Name).FieldName = "Value"
            Me.ʴ(Name).CanSort = False
            Me.ʴ(Name).Value(DateTime.Now, User) = value
        End Set
    End Property

    Public Property LastSaveDate As Date Implements IExtension.LastSaveDate
        Get
            Return mLastSaveDate
        End Get
        Set(value As Date)
            mLastSaveDate = value
        End Set
    End Property


End Class
