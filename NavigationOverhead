Imports unidex.Interfaces
Imports unidex.Constants
 
Public Class ReferenceOverhead


    Public Shared Function Attempt(Name As String, CurrentCharacter As IExtension) As IExtension
        Name = Name.Trim
        Dim CurrentParent = CurrentCharacter
        For Each Letter As Char In Name
            CurrentCharacter = CurrentCharacter.All(ControlChars.ConvertCharacterToLong(Letter))
            CurrentCharacter.Check()
        Next
        Return CurrentCharacter
    End Function

    Public Shared Sub Copy(From As IExtension, ByRef _To As IExtension)
        Try
          For Each Word As String In From.Words
              Try
                  With _To.ʴ(Word)
                      .ClearanceIsRequired = From.ʴ(Word).ClearanceIsRequired
                      .ClearanceRequired = From.ʴ(Word).ClearanceRequired
                      .CreateCharacter = From.ʴ(Word).CreateCharacter
                      .Created = From.ʴ(Word).Created
                      .FieldName = From.ʴ(Word).FieldName
                      .FieldType = From.ʴ(Word).FieldType
                      .GrandParent = From.ʴ(Word).GrandParent
                      .Index = From.ʴ(Word).Index
                      .IsaChild = From.ʴ(Word).IsaChild
                      .Letter = From.ʴ(Word).Letter
                      .Name = From.ʴ(Word).Name
                      .NeedsToSave = From.ʴ(Word).NeedsToSave
                      .Parent = From.ʴ(Word).Parent
                      .PreviousCharacter = From.ʴ(Word).PreviousCharacter
                      Dim SysUser = New Directory.User("SYSTeM", False, "ABSOLUTE")
                      .Value(From.ʴ(Word).LastUpdated, SysUser) = From.ʴ(Word).Value(SysUser)
                      .Weight = From.ʴ(Word).Weight
                  End With
                  Copy(From.ʴ(Word), _To.ʴ(Word))
              Catch
              End Try
          Next
      Catch
      End Try
    End Sub
    Public Shared Sub HandleListNames(ByRef CurrentCharacter As IExtension)
        Dim SysUser = New Directory.User("SYSTeM", False, "ABSOLUTE")
        Select Case CurrentCharacter.FieldName
            Case "String" : HandleListNames(CType(CurrentCharacter.Value(SysUser), String), CurrentCharacter)
            Case "Decimal" : HandleListNames(CType(CurrentCharacter.Value(SysUser), Decimal), CurrentCharacter)
            Case "DateTime" : HandleListNames(CType(CurrentCharacter.Value(SysUser), DateTime), CurrentCharacter)
            Case "Int64" : HandleListNames(CType(CurrentCharacter.Value(SysUser), Int64), CurrentCharacter)
            Case "Byte" : HandleListNames(CType(CurrentCharacter.Value(SysUser), Byte), CurrentCharacter)
            Case "TimeSpan" : HandleListNames(CType(CurrentCharacter.Value(SysUser), TimeSpan), CurrentCharacter)
        End Select
    End Sub
    Public Shared Sub HandleListNames(Value As TimeSpan, ByRef CurrentCharacter As IExtension)
        Try
            With CurrentCharacter
                .FieldType = New TimeSpan
                Dim ready As Boolean
                Try
                    If .Name.Substring(0, 5) <> "Bytes" Then ready = True
                Catch
                    ready = True
                End Try
                If .GrandParent IsNot Nothing And ready Then

                    List(.GrandParent, .Name, Value).Item(.Parent.Name) = Value

                End If
            End With
        Catch
        End Try
    End Sub
    Public Shared Sub HandleListNames(Value As Byte, ByRef CurrentCharacter As IExtension)
        Try
            With CurrentCharacter
                .FieldType = New Byte
                Dim ready As Boolean
                Try
                    If .Name.Substring(0, 5) <> "Bytes" Then ready = True
                Catch
                    ready = True
                End Try
                If .GrandParent IsNot Nothing And ready Then

                    List(.GrandParent, .Name, Value).Item(.Parent.Name) = Value

                End If
            End With
        Catch
        End Try
    End Sub
    Public Shared Sub HandleListNames(Value As Date, ByRef CurrentCharacter As IExtension)
        Try
            With CurrentCharacter
                .FieldType = New DateTime
                Dim ready As Boolean
                Try
                    If .Name.Substring(0, 9) <> "Datetimes" Then ready = True
                Catch
                    ready = True
                End Try
                If .GrandParent IsNot Nothing And ready Then
                    List(.GrandParent, .Name, Value).Item(.Parent.Name) = Value
                End If
            End With
        Catch
        End Try
    End Sub
    Public Shared Sub HandleListNames(Value As Long, ByRef CurrentCharacter As IExtension)
        Try
            With CurrentCharacter
                .FieldType = New Integer
                Dim ready As Boolean
                Try
                    If .Name.Substring(0, 8) <> "Integers" Then ready = True
                Catch
                    ready = True
                End Try
                If .GrandParent IsNot Nothing And ready Then
                    List(.GrandParent, .Name, Value).Item(.Parent.Name) = Value
                End If
            End With
        Catch
        End Try
    End Sub
    Public Shared Sub HandleListNames(Value As Decimal, ByRef CurrentCharacter As IExtension)
        Try
            With CurrentCharacter
                .FieldType = New Decimal
                Dim ready As Boolean
                Try
                    If .Name.Substring(0, 7) <> "Numbers" Then ready = True
                Catch
                    ready = True
                End Try
                If .GrandParent IsNot Nothing And ready Then
                    List(.GrandParent, .Name, Value).Item(.Parent.Name) = Value
                End If
            End With
        Catch
        End Try
    End Sub
    Public Shared Sub HandleListNames(Value As String, ByRef CurrentCharacter As IExtension)
        Try
            With CurrentCharacter
                Dim ready As Boolean
                Try
                    If .Name.Substring(0, 7) <> "Strings" Then ready = True
                Catch
                    ready = True
                End Try
                .FieldType = New String("")
                If .GrandParent IsNot Nothing And ready Then
                    List(.GrandParent, .Name, Value).Item(.Parent.Name) = Value
                End If
            End With
        Catch
        End Try
    End Sub
 

    Public Shared Function InlineIndex(ByRef Current As IExtension, ByRef CurrentParent As IExtension) As IExtension
        Try
            With Current
                If .NeedsToSave Or .IsaChild = False Then
                    .NeedsToSave = False
                    .IsaChild = True
                    .Parent = CurrentParent 
                    If CurrentParent.Parent IsNot Nothing Then .GrandParent = CurrentParent.Parent 


                    Dim ContinueAfter = True
                    Try
                        Select Case True
                            Case .Name.Substring(0, 7) = "Strings" : ContinueAfter = False
                            Case .Name.Substring(0, 5) = "Bytes" : ContinueAfter = False
                            Case .Name.Substring(0, 7) = "Numbers" : ContinueAfter = False
                            Case .Name.Substring(0, 8) = "Integers" : ContinueAfter = False
                            Case .Name.Substring(0, 9) = "Datetimes" : ContinueAfter = False
                            Case .Name.Substring(0, 9) = "TimeSpans" : ContinueAfter = False
                        End Select
                    Catch
                    End Try
                    If Not ContinueAfter Then Exit Try

                    Arrays.Array(Of String).Allocate(CurrentParent.Words, .Name)
                    .Index = CurrentParent.Words.Length - 1
                End If
            End With
        Catch
        End Try
        Return Current
    End Function

    Public Shared Function InnerSpace(Name As String, CurrentCharacter As IExtension) As IExtension

        Name = Name.Trim
        Dim NextCharacter As IExtension
        Dim Current As Int64 = 0
        Try
            For Each Letter As Char In Name
                Current += 1
                NextCharacter = CurrentCharacter.NextCharacter(Letter)
                CurrentCharacter = NextCharacter
            Next
        Catch
            For Index As Int64 = Current To Name.Length
                NextCharacter = CurrentCharacter.Create(Name.Chars(Index - 1), Name.Substring(0, Index))
                CurrentCharacter = NextCharacter
            Next
            CurrentCharacter.Name = Name
            CurrentCharacter.NeedsToSave = True
        End Try

        Return CurrentCharacter
    End Function

    Public Shared Function List(ByRef Current As IExtension, SortBy As String) As Object

        Try
            If Current.ʴ(SortBy).FieldName <> "" Then
                Select Case Current.ʴ(SortBy).FieldName
                    Case "String" : Return List(Current, SortBy, New String(""))
                    Case "Decimal" : Return List(Current, SortBy, New Decimal)
                    Case "DateTime" : Return List(Current, SortBy, New DateTime)
                    Case "Int64" : Return List(Current, SortBy, New Int64)
                    Case "Byte" : Return List(Current, SortBy, New Byte)
                    Case "TimeSpan" : Return List(Current, SortBy, New TimeSpan)
                End Select
            Else
                Return Nothing
            End If
        Catch
            Try
                Return List(Current, SortBy, New Byte)
            Catch
                Try
                    Return List(Current, SortBy, New DateTime)
                Catch
                    Try
                        Return List(Current, SortBy, New TimeSpan)
                    Catch
                        Try
                            Return List(Current, SortBy, New Int64)
                        Catch
                            Try
                                Return List(Current, SortBy, New Decimal)
                            Catch
                                Return List(Current, SortBy, New String(""))
                            End Try
                        End Try
                    End Try

                End Try
            End Try
        End Try
    End Function

    Private Shared SysUser As Interfaces.IUser = New Directory.User("SYSTeM", False, "ABSOLUTE")

    Public Shared Function List(ByRef Current As IExtension, SortBy As String, OfType As TimeSpan) As ITimeSpans

        Try
            Attempt("TimeSpans" & SortBy, Current)
        Catch ex As Exception
            Current.ʴv("TimeSpans" & SortBy, SysUser) = New Arrays.TimeSpans(Current, SortBy)

            With Current.ʴ("TimeSpans" & SortBy)
                .FieldType = OfType
                .FieldName = "TimeSpan"
            End With
        End Try
        Return Current.ʴv("TimeSpans" & SortBy, SysUser)

    End Function

    Public Shared Function List(ByRef Current As IExtension, SortBy As String, OfType As Byte) As IBytes

        Try
            Attempt("Bytes" & SortBy, Current)
        Catch ex As Exception
            Current.ʴv("Bytes" & SortBy, SysUser) = New Arrays.Bytes(Current, SortBy)

            With Current.ʴ("Bytes" & SortBy)
                .FieldType = OfType
                .FieldName = "Byte"
            End With
        End Try
        Return Current.ʴv("Bytes" & SortBy, SysUser)

    End Function
    Public Shared Function List(ByRef Current As IExtension, SortBy As String, OfType As Date) As IDates

        Try
            Attempt("Datetimes" & SortBy, Current)
        Catch ex As Exception
        Current.ʴv("Datetimes" & SortBy, SysUser) = New Arrays.Dates(Current, SortBy)

            With Current.ʴ("Datetimes" & SortBy)
                .FieldType = OfType
                .FieldName = "DateTime"
            End With
        End Try
        Return Current.ʴv("Datetimes" & SortBy, SysUser)

    End Function
    Public Shared Function List(ByRef Current As IExtension, SortBy As String, OfType As Decimal) As INumbers

        Try
            Attempt("Numbers" & SortBy, Current)
        Catch ex As Exception
        Current.ʴv("Numbers" & SortBy, SysUser) = New Arrays.Numbers(Current, SortBy)

            With Current.ʴ("Numbers" & SortBy)
                .FieldType = OfType
                .FieldName = "Decimal"
            End With
        End Try
        Return Current.ʴv("Numbers" & SortBy, SysUser)

    End Function
    Public Shared Function List(ByRef Current As IExtension, SortBy As String, OfType As Long) As IIntegers

        Try
            Attempt("Integers" & SortBy, Current)
        Catch ex As Exception
        Current.ʴv("Integers" & SortBy, SysUser) = New Arrays.Integers(Current, SortBy)

            With Current.ʴ("Integers" & SortBy)
                .FieldType = OfType
                .FieldName = "Int64"
            End With
        End Try
        Return Current.ʴv("Integers" & SortBy, SysUser)

    End Function
    Public Shared Function List(ByRef Current As IExtension, SortBy As String, OfType As String) As IStrings

        Try
            Attempt("Strings" & SortBy, Current)
        Catch ex As Exception
        Current.ʴv("Strings" & SortBy, SysUser) = New Arrays.Strings(Current, SortBy)

            With Current.ʴ("Strings" & SortBy)
                .FieldType = OfType
                .FieldName = "String"
            End With
        End Try
        Return Current.ʴv("Strings" & SortBy, SysUser)

    End Function
End Class 
